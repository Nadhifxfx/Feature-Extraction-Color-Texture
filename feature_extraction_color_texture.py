# -*- coding: utf-8 -*-
"""Feature Extraction Color, Texture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18s2AUvODWEQhueDbM-8z_W3o5UBOIqJV
"""

# 1. Import pustaka
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image
from io import BytesIO

# Fungsi untuk menghitung histogram RGB
def hitung_histogram_rgb(img_np):
    histogram_rgb = {}
    colors = ('red', 'green', 'blue')
    for i, color in enumerate(colors):
        hist = cv2.calcHist([img_np], [i], None, [256], [0, 256])
        histogram_rgb[color] = hist
    return histogram_rgb

# Fungsi untuk menampilkan histogram RGB
def tampilkan_histogram_rgb(hist_rgb, title):
    colors = ('red', 'green', 'blue')
    for color in colors:
        plt.plot(hist_rgb[color], color=color, label=color)
    plt.title(title)
    plt.xlabel('Level Intensitas (0-255)')
    plt.ylabel('Jumlah Pixel')
    plt.legend()
    plt.grid(True)

# 2. Upload gambar input
print("Upload gambar INPUT:")
input_uploaded = files.upload()

# 3. Upload gambar referensi
print("Upload gambar REFERENSI:")
ref_uploaded = files.upload()

# 4. Proses dan tampilkan histogram
for input_name, ref_name in zip(input_uploaded.keys(), ref_uploaded.keys()):
    # Baca dan konversi gambar ke RGB
    input_image = Image.open(BytesIO(input_uploaded[input_name])).convert('RGB')
    ref_image = Image.open(BytesIO(ref_uploaded[ref_name])).convert('RGB')

    input_np = np.array(input_image)
    ref_np = np.array(ref_image)

    # Hitung histogram RGB
    hist_input = hitung_histogram_rgb(input_np)
    hist_ref = hitung_histogram_rgb(ref_np)

    # Tampilkan gambar dan histogram berdampingan
    plt.figure(figsize=(14, 6))

    # Gambar input
    plt.subplot(2, 2, 1)
    plt.imshow(input_np)
    plt.title('Gambar Input')
    plt.axis('off')

    # Histogram input
    plt.subplot(2, 2, 2)
    tampilkan_histogram_rgb(hist_input, 'Histogram RGB - Input')

    # Gambar referensi
    plt.subplot(2, 2, 3)
    plt.imshow(ref_np)
    plt.title('Gambar Referensi')
    plt.axis('off')

    # Histogram referensi
    plt.subplot(2, 2, 4)
    tampilkan_histogram_rgb(hist_ref, 'Histogram RGB - Referensi')

    plt.tight_layout()
    plt.show()

# 1. Import pustaka
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image
from io import BytesIO

# 2. Upload gambar
uploaded = files.upload()

# 3. Baca dan proses gambar
for filename in uploaded.keys():
    image = Image.open(BytesIO(uploaded[filename])).convert('RGB')
    image_np = np.array(image)

    # Pisahkan channel warna
    channels = ('R', 'G', 'B')
    colors = ('red', 'green', 'blue')

    # 4. Tampilkan gambar
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image_np)
    plt.title('Gambar Asli')
    plt.axis('off')

    # 5. Hitung dan tampilkan histogram RGB
    plt.subplot(1, 2, 2)
    for i, color in enumerate(colors):
        hist = cv2.calcHist([image_np], [i], None, [256], [0, 256])
        plt.plot(hist, color=color, label=channels[i])

    plt.title('Histogram Warna (RGB)')
    plt.xlabel('Level Intensitas (0-255)')
    plt.ylabel('Jumlah Pixel')
    plt.legend()
    plt.grid(True)

    plt.tight_layout()
    plt.show()

# Import library
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image
from io import BytesIO

# Upload gambar
uploaded = files.upload()

# Ambil nama file yang diupload
for file_name in uploaded.keys():
    # Baca gambar dengan PIL dan konversi ke OpenCV format
    img_pil = Image.open(BytesIO(uploaded[file_name]))
    image = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

    # Konversi gambar ke HSV
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv_image)

    # Tampilkan gambar asli
    plt.figure(figsize=(5, 5))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title("Gambar Asli")
    plt.axis('off')
    plt.show()

    # Tampilkan histogram HSV
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 3, 1)
    plt.hist(h.ravel(), bins=180, range=[0, 180], color='red')
    plt.title('Histogram Hue')
    plt.xlabel('Hue')
    plt.ylabel('Pixel Count')

    plt.subplot(1, 3, 2)
    plt.hist(s.ravel(), bins=256, range=[0, 256], color='green')
    plt.title('Histogram Saturation')
    plt.xlabel('Saturation')

    plt.subplot(1, 3, 3)
    plt.hist(v.ravel(), bins=256, range=[0, 256], color='blue')
    plt.title('Histogram Value')
    plt.xlabel('Value')

    plt.tight_layout()
    plt.show()

# Import library
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image
from io import BytesIO

# Upload gambar
uploaded = files.upload()

# Ambil nama file yang diupload
for file_name in uploaded.keys():
    # Baca gambar dengan PIL dan konversi ke OpenCV format
    img_pil = Image.open(BytesIO(uploaded[file_name]))
    image = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

    # Konversi gambar ke HSV
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv_image)

    # Tampilkan gambar asli
    plt.figure(figsize=(5, 5))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title("Gambar Asli")
    plt.axis('off')
    plt.show()

    # Tampilkan histogram HSV
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 3, 1)
    plt.hist(h.ravel(), bins=180, range=[0, 180], color='red')
    plt.title('Histogram Hue')
    plt.xlabel('Hue')
    plt.ylabel('Pixel Count')

    plt.subplot(1, 3, 2)
    plt.hist(s.ravel(), bins=256, range=[0, 256], color='green')
    plt.title('Histogram Saturation')
    plt.xlabel('Saturation')

    plt.subplot(1, 3, 3)
    plt.hist(v.ravel(), bins=256, range=[0, 256], color='blue')
    plt.title('Histogram Value')
    plt.xlabel('Value')

    plt.tight_layout()
    plt.show()

# Import library
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image
from io import BytesIO

# Upload gambar
uploaded = files.upload()

# Ambil nama file yang diupload
for file_name in uploaded.keys():
    # Baca gambar dan konversi ke format OpenCV
    img_pil = Image.open(BytesIO(uploaded[file_name]))
    image = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

    # Konversi ke HSV
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)

    # Hitung histogram Hue
    hist_hue = cv2.calcHist([h], [0], None, [180], [0, 180])

    # Jumlah piksel dalam rentang Hue tertentu
    red_range = int(np.sum(hist_hue[0:10]) + np.sum(hist_hue[160:180]))  # merah
    yellow_range = int(np.sum(hist_hue[20:35]))                          # kuning
    green_range = int(np.sum(hist_hue[35:85]))                           # hijau
    total_pixels = h.size

    # Persentase tiap warna
    red_percent = red_range / total_pixels * 100
    yellow_percent = yellow_range / total_pixels * 100
    green_percent = green_range / total_pixels * 100

    # Tabel nilai Hue
    labels = ['Merah (Matang)', 'Kuning (Matang)', 'Hijau (Mentah)']
    values = [red_percent, yellow_percent, green_percent]

    # Klasifikasi buah berdasarkan dominasi warna
    if (red_percent + yellow_percent) > 50:
        status = "Matang"
    elif (red_percent + yellow_percent) > 25:
        status = "Setengah Matang"
    else:
        status = "Belum Matang"

    # Tampilkan gambar
    plt.figure(figsize=(5, 5))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(f"Gambar Asli (Status: {status})")
    plt.axis('off')
    plt.show()

    # Tampilkan bar chart (sebagai tabel visual)
    plt.figure(figsize=(8, 4))
    bar_colors = ['red', 'gold', 'green']
    plt.bar(labels, values, color=bar_colors)
    plt.ylim(0, 100)
    plt.title('Persentase Warna Berdasarkan Hue')
    plt.ylabel('Persentase (%)')

    # Tambahkan label di atas bar
    for i, v in enumerate(values):
        plt.text(i, v + 1, f"{v:.1f}%", ha='center', fontweight='bold')

    plt.tight_layout()
    plt.show()

    # Cetak ringkasan klasifikasi
    print("=== Ringkasan Hue ===")
    print(f"• Merah (0–10 & 160–180): {red_percent:.2f}%")
    print(f"• Kuning (20–35)       : {yellow_percent:.2f}%")
    print(f"• Hijau  (35–85)       : {green_percent:.2f}%")
    print(f"➤ Status Buah          : {status}")